require 'pathname'

fastlane_version "1.39.0"

$PROJECT_DIR = Pathname('..').realpath

def dirPlatform
  $PROJECT_DIR/'platforms'/ENV["FASTLANE_PLATFORM_NAME"]
end

def persistent(*paths)
  ($PROJECT_DIR/'persistent').join(*paths)
end

def into_platform &block
  dir = dirPlatform/'fastlane'
  FileUtils.mkdir_p dir
  Dir.chdir(dir) do
    block.call
  end
end

def adjust_buildnum(offset)
  src = ENV['BUILD_NUM'] || '0'
  ENV['BUILD_NUM'] = "#{Integer(src) + offset}"
  puts "Adjusted BuildNum: #{ENV['BUILD_NUM']}"
end

def copy_config
  src = $PROJECT_DIR/'cordova.config.xml'
  dst = $PROJECT_DIR/'config.xml'
  if src.exist? && !dst.exist? then
    FileUtils.copy(src, dst)
  end
end

def createWWW
  if !($PROJECT_DIR/'www').exist? then
    Dir.chdir($PROJECT_DIR) do
      sh("npm run build")
    end
    write_settings
    cache_index
  end
end

def clean
  def del(*path)
    target = $PROJECT_DIR.join(*path)
    if target.exist? then
      if target.directory? then
        if !(target/'.keep').exist? then
          puts "Deleting dir: #{target.realpath}"
          FileUtils.rm_rf target
        end
      else
        if !Pathname("#{target.to_s}.keep").exist? then
          puts "Deleting file: #{target.realpath}"
          target.delete
        end
      end
    end
  end
  del('config.xml')
  del('resources', ENV["FASTLANE_PLATFORM_NAME"])
  del('platforms')
  del('plugins')
  del('www')
end

def prepare(app_id)
  copy_config

  set_app_id(id: app_id)

  into_mode

  adjust_buildnum(0)

  createWWW

  cordova(plugins: [
    'cordova-plugin-crosswalk-webview@~2.0.0',
    'https://github.com/driftyco/cordova-plugin-wkwebview-engine.git',
    'cordova-plugin-device@~1.1.1',
    'cordova-plugin-console@~1.0.2',
    'cordova-plugin-sqlite-2@~1.0.4',
    'cordova-plugin-camera@~2.1.0',
    'cordova-plugin-media-capture@~1.3.0',
    'cordova-plugin-splashscreen@~3.1.0',
    'cordova-plugin-statusbar@~2.1.0',
    'cordova-plugin-geolocation@~2.1.0',
    'cordova-plugin-whitelist@~1.3.0',
    'cordova-plugin-dialogs@~1.2.0',
    'cordova-plugin-country@~1.0.2',
    'cordova-plugin-globalization@~1.0.2',
    'cordova-plugin-inappbrowser@~1.3.0',
    'cordova.plugins.diagnostic@~2.3.11',
    'cordova-plugin-app-version@~0.1.8',
    'cordova-plugin-x-toast@~2.5.0',
    'phonegap-plugin-push@~1.4.0',
    "https://github.com/fathens/Cordova-Plugin-FBConnect.git --variable APP_ID=#{ENV['FACEBOOK_APP_ID']} --variable APP_NAME=#{ENV['APPLICATION_NAME']}",
    "https://github.com/fathens/Cordova-Plugin-Crashlytics.git --variable API_KEY=#{ENV['FABRIC_API_KEY']}"
  ])
end

platform :ios do
  lane :clean do
    clean
  end

  lane :build do
    prepare(ENV['IOS_BUNDLE_ID'])
    sh('cordova prepare ios')

    if is_ci?
      keychainName = sh("security default-keychain").match(/.*\/([^\/]+)\"/)[1]
      puts "Using keychain: #{keychainName}"
      import_certificate keychain_name: keychainName, certificate_path: persistent('ios', "Distribution.cer").to_s
      import_certificate keychain_name: keychainName, certificate_path: persistent('ios', "Distribution.p12").to_s, certificate_password: ENV["IOS_DISTRIBUTION_KEY_PASSWORD"]
    end

    def is_adhoc?
      !["release"].include? ENV['BUILD_MODE']
    end

    into_platform do
      recreate_schemes(
        project: "#{ENV["APPLICATION_DISPLAY_NAME"]}.xcodeproj"
      )

      if ENV["BUILD_NUM"] != nil then
        increment_build_number(
        build_number: ENV["BUILD_NUM"]
        )
      end

      sigh(
      app_identifier: ENV['IOS_BUNDLE_ID'],
      adhoc: is_adhoc?
      )

      profile = FastlaneCore::ProvisioningProfile.parse lane_context[:SIGH_PROFILE_PATH]
      UI.message "Using profile: #{profile}"
      signId = "iPhone Distribution: #{profile['TeamName']} (#{profile['TeamIdentifier'].first})"

      open(dirPlatform/'cordova'/'build-extras.xcconfig', 'a') { |f|
        f.puts "CODE_SIGN_IDENTITY[sdk=iphoneos*] ="
      }

      gym(
      workspace: "#{ENV["APPLICATION_DISPLAY_NAME"]}.xcworkspace",
      scheme: ENV["APPLICATION_DISPLAY_NAME"],
      configuration: "Release",
      include_bitcode: false,
      xcargs: {
        CODE_SIGN_IDENTITY: signId,
        PROVISIONING_PROFILE_SPECIFIER: profile['Name'],
        PRODUCT_BUNDLE_IDENTIFIER: ENV['IOS_BUNDLE_ID']
      }.map { |k, v| "#{k.to_s.shellescape}='#{v}'" }.join(' ')
      )

      if is_ci? then
        case ENV['BUILD_MODE']
        when "beta", "debug"
          release_note

          Dir.chdir($PROJECT_DIR) do
            command = [
              Pathname('Pods')/'Crashlytics'/'submit',
              ENV["FABRIC_API_KEY"],
              ENV["FABRIC_BUILD_SECRET"],
              "-ipaPath '#{ENV["APPLICATION_DISPLAY_NAME"]}.ipa'",
              "-notesPath '#{ENV["RELEASE_NOTE_PATH"]}'",
              "-groupAliases '#{ENV["FABRIC_CRASHLYTICS_GROUPS"]}'",
              "-notifications YES",
              "-debug NO"
            ]
            system(command.join ' ')
          end
        when "release"
          release_note(line_format: '%s')

          pilot(
          app_identifier: ENV['IOS_BUNDLE_ID'],
          skip_submission: true,
          distribute_external: false,
          changelog: File.open(ENV['RELEASE_NOTE_PATH']).read
          )
        end
      end
    end
  end
end

platform :android do
  lane :clean do
    clean
  end

  lane :build do
    prepare(ENV['ANDROID_GOOGLEPLAY_PACKAGE_NAME'])

    def is_multi?
      ["release"].include? ENV['BUILD_MODE']
    end

    android_build(
    keystore: persistent('android', 'keystore'),
    multi_apks: is_multi?,
    sdks: [
      'platform-tools',
      'tools',
      'android-23',
      'extra-google-m2repository',
      'extra-android-support',
      'extra-android-m2repository',
      'build-tools'
    ])

    if is_ci? then
      case ENV['BUILD_MODE']
      when "beta", "debug"
        release_note

        into_platform do
          crashlytics(
          apk_path: (Pathname('build')/'outputs'/'apk'/'android-release.apk').to_s,
          api_token: ENV["FABRIC_API_KEY"],
          build_secret: ENV["FABRIC_BUILD_SECRET"],
          notes_path: ENV["RELEASE_NOTE_PATH"],
          groups: ENV["FABRIC_CRASHLYTICS_GROUPS"]
          )
        end
      when "release"
        ['armv7', 'x86'].each do |arch|
          begin
            apk = $PROJECT_DIR/'platforms'/'android'/'build'/'outputs'/'apk'/"android-#{arch}-release.apk"
            supply(
            apk: apk.to_s,
            package_name: ENV['ANDROID_GOOGLEPLAY_PACKAGE_NAME'],
            track: 'beta',
            skip_upload_metadata: true,
            skip_upload_images: true,
            skip_upload_screenshots: true,
            issuer: ENV['ANDROID_GOOGLEPLAY_SERVICE_ACCOUNT_EMAIL'],
            key: persistent('android', 'service_account_key.p12')
            )
          rescue => ex
            puts ex.message
          end
        end
      end
    end
  end
end

after_all do
  if ENV["BUILD_NUM"] then
    git_tag(
    username: ENV['GITHUB_USERNAME'],
    token: ENV['GITHUB_OAUTH_TOKEN'],
    tag_name: ['deployed', ENV["FASTLANE_PLATFORM_NAME"], ENV['BUILD_MODE'], ENV["BUILD_NUM"]].join('/')
    )
  end
end
